import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'
apply plugin: 'maven-publish' // Use the maven-publish plugin for AAR generation

android {
    compileSdkVersion  35

    namespace 'io.nano.tex'
    publishNonDefault true

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 35
        versionCode 1
        versionName "1.0.0"
        packagingOptions {
            doNotStrip '**.so'     // ADD THIS! #1
        }
        externalNativeBuild {
            cmake {
                cppFlags "-Wl,--build-id -g, -fsanitize=address, -DMEM_CHECK=ON, -DGRAPHICS_DEBUG=ON, -DHAVE_LOG=OFF"     // ADD THIS! #2
                cFlags "-fsanitize=address"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            ndk {
                debugSymbolLevel 'FULL'  // This ensures full debugging symbols are generated
            }
            minifyEnabled false
        }
    }

    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDirs 'src/main/libs'
    }

    def ndkBuild = ndkBuildCmd()

    task buildTeX(type: Exec) {
        workingDir file('src/main')
        commandLine ndkBuild
    }

    tasks.withType(JavaCompile) { task -> task.dependsOn buildTeX }

    task cleanNative(type: Exec) {
        workingDir file('src/main')
        commandLine ndkBuild, 'clean'
    }

    clean.dependsOn cleanNative

    tasks.withType(JavaCompile) {
        it.doLast { task ->
            println "COPY TEX RESOURCES INTO CLASSES"
            copy {
                from "${projectDir}/src/main/jni/tex/res"
                into "${task.destinationDir}/io/nano/tex/res"
            }
            copy {
                from "${projectDir}/src/main/jni/tex/res"
                into "${buildDir}/intermediates/res/merged/debug/io/nano/tex/res"
            }
            copy {
                from "${projectDir}/src/main/jni/tex/res"
                into "${buildDir}/intermediates/merged_assets/debug/out/io/nano/tex/res"
            }
            copy {
                from "${projectDir}/src/main/jni/tex/res"  // Source folder
                into "${projectDir}/src/main/assets/io/nano/tex/res"  // Target folder inside assets
            }
        }
    }
}

def ndkBuildCmd() {
    // First check if the environment variable ANDROID_NDK_ROOT is set
    def androidNdkRoot = System.getenv("ANDROID_NDK_ROOT")
    if (androidNdkRoot != null) {
        println "Using NDK from environment variable: ${androidNdkRoot}"
        return androidNdkRoot
    }

    // If not, fall back to the `local.properties` file
    File localPropertiesFile = project.rootProject.file('local.properties')
    if (!localPropertiesFile.exists()) {
        throw new GradleException("local.properties file not found. Please specify the NDK path in this file.")
    }

    Properties prop = new Properties()
    prop.load(localPropertiesFile.newDataInputStream())

    // Get NDK directory from `local.properties`
    def ndkDir = prop.getProperty('ndk.dir')
    if (ndkDir == null) {
        throw new GradleException("NDK location not found in local.properties. Please specify the NDK path.")
    }

    // Construct the NDK build command path
    def ndkBuild = "${ndkDir}/ndk-build"

    // If on Windows, append ".cmd" to the NDK build command
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        ndkBuild += ".cmd"
    }

    println "Using NDK from local.properties: ${ndkDir}"
    return ndkBuild
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

// Task to generate AAR without publishing
// This is optional, because 'assembleRelease' is already available in the build system.
task generateAar {
    dependsOn 'assembleDebug'

    doLast {
        println "Generated AAR file"
    }
}